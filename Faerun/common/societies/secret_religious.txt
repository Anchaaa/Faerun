# Hardcoded society tag. If this exists, religions will get versions of this society generated for them unless specifically opted out,
# or another is specificed. See dynamic_societies.info for more documentation
secret_religious_society_template = {
	template = yes
	primary_attribute = diplomacy
	opinion_to_other_members = +10
	opinion_per_rank_above = +5
	opinion_to_perceived_members = +10
	sound = secret_cults_interface
	society_ranks_gfx = secret_ranks

	criminal = yes
	is_religious = yes
	is_secret = yes
	society_influence = no

	non_interference = {
		same_realm = FROM
	}

	show_society = {
		secret_religion = FROM

		FROM = {
			num_of_society_members > 0
		}
	}

	can_join_society = {
		trigger_if = {
			limit = { ai = yes }

			NOT = {
				is_society_rank_full = {
					society = FROM
					rank = 1
				}
			}
		}

		trigger_if = {
			limit = { has_character_flag = society_join_block }
			always = no
		}

		secret_religion = FROM
		is_adult = yes
		NOT = { culture = monster }

		FROM = {
			num_of_society_members > 0
		}

		trigger_if = {
			limit = { prisoner = yes }
			prisoner = no
		}
	}

	potential = { # To remain in society
		secret_religion = FROM
		is_adult = yes
	}

	society_rank = {
		level = 1
		limit = 50
		startup_limit = 0

		decisions = {
			secret_religions_induct_child
			secret_religions_evoke_sympathy
		}
	}

	society_rank = {
		level = 2
		limit = 30
		startup_limit = 0

		modifier = {
			is_visible = {
				OR = {
					same_society_as = FROM
					FROM = { is_society_discovered = yes }
				}
			}

			diplomacy = 1
		}

		decisions = {
			secret_religions_induct_character
		}
	}

	society_rank = {
		level = 3
		limit = 10
		startup_limit = 0

		modifier = {
			is_visible = {
				OR = {
					same_society_as = FROM
					FROM = { is_society_discovered = yes }
				}
			}

			diplomacy = 2
		}

		decisions = {
			secret_religions_prepare_grounds
		}
	}

	society_rank = {
		level = 4
		limit = 1
		startup_limit = 0

		modifier = {
			is_visible = {
				OR = {
					same_society_as = FROM
					FROM = { is_society_discovered = yes }
				}
			}

			diplomacy = 3
		}

		decisions = {
			secret_religions_openly_adopt_faith
		}
	}

	plots = {
	}

	ambitions = {
	}

	monthly_currency_gain = {
		name = secret_religion_currency

		per_attribute = {
			name = diplomacy
			value = 0.5
		}

		has_trait = {
			trait = zealous
			value = 3
		}

		has_trait = {
			trait = scholar
			value = 3
		}

		has_trait = {
			trait = theologian
			value = 3
		}

		has_trait = {
			trait = celibate
			value = 2
		}

		has_trait = {
			trait = diligent
			value = 1
		}

		has_trait = {
			trait = chaste
			value = 1
		}

		has_trait = {
			trait = temperate
			value = 1
		}

		has_trait = {
			trait = charitable
			value = 1
		}

		has_trait = {
			trait = kind
			value = 1
		}

		has_trait = {
			trait = patient
			value = 1
		}

		has_trait = {
			trait = humble
			value = 1
		}

		has_trait = {
			trait = honest
			value = 1
		}

		has_trait = {
			trait = erudite
			value = 1
		}

		#has_trait = {
		#	trait = pilgrim
		#	value = 1
		#}
		society_rank = {
			rank = 4
			value = 10
		}
	}

	member_score_per_attribute = 3
	member_score_per_rank = 100

	member_score = {
		value = 10

		mult_modifier = {
			factor = 1.3
			trait = zealous
		}

		mult_modifier = {
			factor = 1.3
			trait = scholar
		}

		mult_modifier = {
			factor = 1.3
			trait = theologian
		}

		mult_modifier = {
			factor = 1.2
			trait = celibate
		}

		mult_modifier = {
			factor = 1.2
			trait = diligent
		}

		mult_modifier = {
			factor = 1.1
			trait = chaste
		}

		mult_modifier = {
			factor = 1.1
			trait = temperate
		}

		mult_modifier = {
			factor = 1.1
			trait = charitable
		}

		mult_modifier = {
			factor = 1.1
			trait = kind
		}

		mult_modifier = {
			factor = 1.1
			trait = patient
		}

		mult_modifier = {
			factor = 1.1
			trait = humble
		}

		mult_modifier = {
			factor = 1.1
			trait = honest
		}

		mult_modifier = {
			factor = 1.1
			trait = erudite
		}

		#modifier = {
		#	trait = pilgrim
		#	factor = 1.1
		#}
	}

	startup_populate = {
		trigger = {
			always = no
		}
	}
}
